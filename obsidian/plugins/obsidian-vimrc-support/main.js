'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var VimrcPlugin = /** @class */ (function (_super) {
    __extends(VimrcPlugin, _super);
    function VimrcPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastYankBuffer = new Array(0);
        _this.lastSystemClipboard = "";
        _this.yankToSystemClipboard = false;
        return _this;
    }
    VimrcPlugin.prototype.onload = function () {
        var _this = this;
        console.log('loading Vimrc plugin');
        this.registerEvent(this.app.workspace.on('file-open', function (file) {
            var VIMRC_FILE_NAME = '.obsidian.vimrc';
            _this.app.vault.adapter.read(VIMRC_FILE_NAME).
                then(function (lines) { return _this.readVimInit(lines); }).
                catch(function (error) { console.log('Error loading vimrc file', VIMRC_FILE_NAME, 'from the vault root'); });
        }));
        this.registerDomEvent(document, 'click', function () {
            _this.captureYankBuffer();
        });
        this.registerDomEvent(document, 'keyup', function () {
            _this.captureYankBuffer();
        });
        this.registerDomEvent(document, 'focusin', function () {
            _this.captureYankBuffer();
        });
    };
    VimrcPlugin.prototype.onunload = function () {
        console.log('unloading Vimrc plugin (but Vim commands that were already loaded will still work)');
    };
    VimrcPlugin.prototype.readVimInit = function (vimCommands) {
        var _this = this;
        var view = this.app.workspace.activeLeaf.view;
        if (view.getViewType() == 'markdown') {
            var markdownView = view;
            var cmEditor = markdownView.sourceMode.cmEditor;
            if (cmEditor && !CodeMirror.Vim.loadedVimrc) {
                CodeMirror.Vim.defineOption('clipboard', '', 'string', ['clip'], function (value, cm) {
                    if (value) {
                        if (value.trim() == 'unnamed' || value.trim() == 'unnamedplus') {
                            if (!_this.yankToSystemClipboard) {
                                _this.yankToSystemClipboard = true;
                                console.log("Vim is now set to yank to system clipboard.");
                            }
                        }
                        else {
                            throw new Error("Unrecognized clipboard option, supported are 'unnamed' and 'unnamedplus' (and they do the same)");
                        }
                    }
                });
                CodeMirror.Vim.defineOption('tabstop', 4, 'number', [], function (value, cm) {
                    if (value) {
                        cmEditor.setOption('tabSize', value);
                    }
                });
                CodeMirror.Vim.defineEx('iunmap', '', function (cm, params) {
                    if (params.argString.trim()) {
                        CodeMirror.Vim.unmap(params.argString.trim(), 'insert');
                    }
                });
                CodeMirror.Vim.defineEx('noremap', '', function (cm, params) {
                    var _a;
                    if (!((_a = params === null || params === void 0 ? void 0 : params.args) === null || _a === void 0 ? void 0 : _a.length)) {
                        throw new Error('Invalid mapping: noremap');
                    }
                    if (params.argString.trim()) {
                        CodeMirror.Vim.noremap.apply(CodeMirror.Vim, params.args);
                    }
                });
                vimCommands.split("\n").forEach(function (line, index, arr) {
                    if (line.trim().length > 0 && line.trim()[0] != '"') {
                        CodeMirror.Vim.handleEx(cmEditor, line);
                    }
                });
                // Make sure that we load it just once per CodeMirror instance.
                // This is supposed to work because the Vim state is kept at the keymap level, hopefully
                // there will not be bugs caused by operations that are kept at the object level instead
                CodeMirror.Vim.loadedVimrc = true;
            }
        }
    };
    VimrcPlugin.prototype.captureYankBuffer = function () {
        var _this = this;
        if (this.yankToSystemClipboard) {
            var currentBuffer = CodeMirror.Vim.getRegisterController().getRegister('yank').keyBuffer;
            if (currentBuffer != this.lastYankBuffer) {
                if (this.lastYankBuffer.length > 0 && currentBuffer.length > 0 && currentBuffer[0]) {
                    navigator.clipboard.writeText(currentBuffer[0]);
                    navigator.clipboard.readText().then(function (value) { _this.lastSystemClipboard = value; });
                    console.log("Yank captured");
                }
                this.lastYankBuffer = currentBuffer;
                return;
            }
            var currentClipboard = navigator.clipboard.readText().then(function (value) {
                if (value != _this.lastSystemClipboard) {
                    console.log("Clipboard change captured");
                    var yankRegister = CodeMirror.Vim.getRegisterController().getRegister('yank');
                    yankRegister.setText(value);
                    _this.lastYankBuffer = yankRegister.keyBuffer;
                    _this.lastSystemClipboard = value;
                }
            });
        }
    };
    return VimrcPlugin;
}(obsidian.Plugin));

module.exports = VimrcPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
